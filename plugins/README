Gypsum Plugins
==============

Scripts in this directory are automatically loaded on Gypsum startup.

As Gypsum is a free and open system, anything described in this document
can be overridden or augmented, so I'll just describe the defaults and
leave the rest to your imagination. Anything's possible.

Functionality stated here is a Gypsum promise, unless marked "advisory".
Upgrading Gypsum within the same major version should not violate any
promised behaviour, and any departure from these promises is a bug. More
promises can be added at any minor version, so backward compatibility is
guaranteed only as far as that minor version. Semantic Versioning v2.0.0
is applicable here - see http://semver.org/ for details. (Note: Due to a
misreading of my own notes, I errantly released a v1.2.1 which, in theory,
added pledges to this file. A followup v1.3.0 release corrects this; all
1.2.1 and 1.2.2-git releases should be considered buggy.)

Every plugin has a name, which is the file name without any path or the
".pike" extension. Plugins are loaded in directory-walk order, but once
bootstrapping is complete, only the file name matters. Initialization
order can thus be modified by moving scripts into subdirectories.

A plugin may inherit any combination of the following, to gain access
to Gypsum facilities and to implement the hook's functionality:

Command - 'inherit command'
---------------------------

Commands are invoked explicitly by the user typing "/foo", where foo is
the plugin's name. The plugin should define a function thus:

int process(string param,mapping(string:mixed) subw)

The 'param' parameter is the parameters to the command. (Yo dawg?) It
may be "", but it will never be 0. The subw mapping identifies the
subwindow (aka tab) into which the command was typed; ideally (but not
mandatorially) this should be where messages are sent, etc.

If a command triggers some command being sent to the connection, it is
courteous to clear the prompt prior to returning:

subw->prompt=({([])});

This maintains the behaviour of normal command entry. Otherwise, the
prompt (if any) will be retained, which is normal behaviour for local
operations.

Hook - 'inherit hook'
---------------------

Hooks provide one or both of an input hook (monitors typed commands)
and an output hook (monitors text from the server). Their function
signatures are:

int inputhook(string line,mapping(string:mixed) subw)
int outputhook(string line,mapping(string:mixed) conn)

An input hook is very similar to a command processor, with the following
distinctions:

* Only one command processor is ever called for a given command - the
  one whose name matches the command entered. Every hook is called for
  every command.
* Command processors handle slash commands (eg "/alias"). Hooks handle
  what would otherwise go to the MUD (those without slashes).
* In "password mode" (where inputted text is hidden), hooks are not
  called. Commands still will be, though.
* A command's "param" is what comes after the command name. A hook's
  "line" is the entire line.

An input hook can feed a replacement command into the system with:
nexthook(line, subw);
This can be either before or after returning 1 from the hook function.
If nexthook is successful, it will return 1, so modifying the command
can be done by simply:
return nexthook(modified_line, subw);
Returning from the hook function and subsequently calling nexthook
will work so long as the subw still exists. (Note that nexthook will
not call the current hook function, and thus cannot create an infinite
loop.)
ADVISORY: If this is called _and_ 0 is returned, both commands will be
executed, but this is not the normal form of processing and is not
formally supported. Similarly if nexthook is called to synthesize an
input command that wasn't in response to an inputhook call.

An output hook is similar to an input hook, but works on a different
type of line: a line of text from the server. It therefore does not
receive a "subw", but instead a "conn" (connection info), which will
have a subwindow reference as conn->display - this can be used just
like subw.

Window - 'inherit window'
-------------------------

Rather than manually creating a window, inherit window to ensure that
your subwindow is well-behaved. Provide the following functions:

void makewindow()
Called when your plugin is first loaded, and not called when it is
reloaded. Should store all GTK object references etc inside win[].
The plugin's main window should be stored in win->mainwindow; set
(or consider setting) the following properties on it:
	"title":"some useful string, even if you suppress its display"
	"transient-for":G->G->window->mainwindow /* always do this */
	"modal":1 /* may be useful for config dialogs */
After creating the window, call ::makewindow() in case further setup
needs to be done.

void dosignals()
Connect signals to callback functions. Will be called on reload.
Should look up GTK objects from win[] and use gtksignal() thus:
	::dosignals();
	win->signals+=({
		gtksignal(win->someobj,"some_event",callback),
		//... as many as needed
	});
As a shortcut for this, you can define signal handlers thus:
	void sig_someobj_some_event() {...}
This will be equivalent to naming it 'callback' and using the above code. In
many cases, this will mean that dosignals() need not be overridden at all.
(This is useful only in the simple and common case where no other parameters
needed - no parameter to the function, connect after rather than before, etc.
For the less common cases, just override dosignals and be explicit.)

Generic storage space is in mapping(string:mixed) win, which is
retained across reloads.

Normally, the window will be hidden from pagers and task bars (under window
manager control; Gypsum simply sets the appropriate hints). Disable this by
marking that your window is not a subwindow:
constant is_subwindow=0;

Certain stock objects with obvious events can be created with simple
function calls. Use of these functions guarantees a consistent look, and
also automatically connects the appropriate signal handler. The following
stock objects are available:

stock_close() - a Close button, which will call closewindow().

Movable window - 'inherit movablewindow'
----------------------------------------

The same as 'inherit window' in usage, but gives automatic saving
and loading of the window position. Provide one additional constant:

constant pos_key="plugins/plugin_name/winpos";

This will be used as the persist[] key in which the window position
is stored. Optionally also provide:

constant load_size=1; //To resize on startup to the last saved size

Otherwise is identical to window above.

Configuration dialog - 'inherit configdlg'
------------------------------------------

A somewhat more-featured version of window, this will do nearly all of
the work of a config dialog - as long as your configuration fits in
the provided framework. (If it doesn't, just use window/movablewindow
and do everything directly.)

Provide any or all of:

mapping(string:mixed) windowprops=(["title":"Configure"]);
//Create and return a widget (most likely a layout widget) representing all the custom content.
//If allow_rename (see below), this must assign to win->kwd a GTK2.Entry for editing the keyword;
//otherwise, win->kwd is optional (it may be present and read-only (and ignored on save), or
//it may be a GTK2.Label, or it may be omitted altogether).
GTK2.Widget make_content() { }
mapping(string:mapping(string:mixed)) items; //Will never be rebound. Will generally want to be an alias for a better-named mapping.
void save_content(mapping(string:mixed) info) { } //Retrieve content from the window and put it in the mapping.
void load_content(mapping(string:mixed) info) { } //Store information from info into the window
void delete_content(string kwd,mapping(string:mixed) info) { } //Delete the thing with the given keyword.
string actionbtn; //(DEPRECATED) If set, a special "action button" will be included, otherwise not. This is its caption.
void action_callback() { } //(DEPRECATED) Callback when the action button is clicked (provide if actionbtn is set)
constant allow_new=1; //Set to 0 to remove the -- New -- entry; if omitted, -- New -- will be present and entries can be created.
constant allow_delete=1; //Set to 0 to disable the Delete button (it'll always be present)
constant allow_rename=1; //Set to 0 to ignore changes to keywords
constant strings=({"key","key","key"}); //Simple bindings, see below
constant ints=({"key","key","key"});
constant bools=({"key","key","key"});
constant persist_key="pluginname/whatever"; //Set this to the persist[] key to load items[] from; if set, persist will be saved after edits.

It looks dauntingly complicated, but it's fairly straight-forward. Look at
examples using it (eg plugins/timer.pike) and replicate. Most of the elements
have sane defaults; it's possible to create a fully functional configdlg by
using persist_key, strings/ints/bools, and make_content() only.

The simple bindings arrays are for the common case where a widget in win[]
has the same name as a string or integer in info[]. In that case, you can
simply list the keys in strings/ints and the saving and loading will be done
for you (prior to save_content/load_content being called). In the case of
bools, it's assumed that the objects are GTK2.CheckButton()s, and will have
their active state set; the others will have their text set.

Status text - 'inherit statustext'
----------------------------------

Allows precisely one label (by default) to be displayed as part of the
main window's status text. No functions need be provided; simply call
setstatus(sbtext) any time you wish to change the currently-displayed
text. Order of elements on the status bar is by order loaded.

Instead of a single label, some other widget can be placed on the bar.
Be careful with this, though - avoid expanding the statusbar's height.
Override this:

GTK2.Widget makestatus() {return statustxt->lbl=....;}

It must both set statustxt->lbl to something, and return something.
They need not necessarily be the same object (eg the returned label
might be wrapped inside something else for structure), but if not, the
return object must be a parent (direct or indirect) of statustxt->lbl.

The status text will have a tooltip, which by default is your plugin's
name. To change this to something more useful, put this in create():
statustxt->tooltip = "whatever text you want";
This must be done prior to calling ::create(), as there is currently no
way to alter the tooltip post-creation. (This may change in future.)

Status text with eventbox - 'inherit statusevent'
-------------------------------------------------

Just like statustext, but creates an eventbox. Most of this is to be
considered ADVISORY as the details may change, but the intent is to
provide an easy way to respond to mouse clicks. The simplest form is
standardized: inherit this, don't override makestatus(), and implement
a statusbar_double_click function, which will be called when the user
double-clicks on your statusbar entry.

The event box itself is available as statustxt->evbox and can be, for
instance, recolored. Using this to provide a colored statustext should
be used sparingly, as color can become very distracting if overused,
but this can be an easy way to highlight an alert state.

Plugin menu item - 'inherit plugin_menu'
----------------------------------------

Creates an entry on the 'Plugins' pull-down menu. Provide:

constant menu_label=0; //(string) The initial label for your menu.
constant menu_accel_key=0; //(int) Accelerator key. Provide if you want an accelerator.
constant menu_accel_mods=0; //(int) Modifier keys, eg GTK2.GDK_CONTROL_MASK. Ignored if !menu_accel_key.
void menu_clicked() { }

ADVISORY: Note that menu_clicked can be any callable, eg a class, not
just a function. Be careful with this, though, as it may receive some
arguments (it's currently used directly as a GTK signal handler). Works
beautifully as long as this isn't a problem; a number of plugins do
this by having an explicit create() that doesn't pass args on to its
inherits. In the future, this may have specific args provided, but code
that assumes no args will always be safe.

Uses for this include opening/showing a window or configdlg, giving
statistical information to the user, giving usage information about a
command... just about anything. It's potentially more discoverable than
a command (definitely more discoverable than a hook feature), and less
intrusive than a window.

To change the menu item text at run time (or based on dynamic state), call
set_menu_text("new text"). This can be done at any time; check inside create()
after calling ::create() to rescan after an update.

DEPRECATED: If a menu_label is not provided, the plugin name will be used.
This is inadvisable, as it's not usually the most helpful piece of text that
could be put on a menu item. In future, the default may be changed (eg blank),
and also introspection is easier if some kind of meaningful label is provided,
so even if set_menu_text() is to be unconditionally called, it's best to have
at least a placeholder in the constant.

FUTURE PLANS: There may in future be a way to designate a different menu for
the menu item to be added to. Accepting submissions as to the best way to
notate this.

General notes
-------------

All handlers should return 1 if processing is "complete" - if the
command or line has been consumed. For commands, this should be the
normal case, and suppresses the "Unknown command" message; for hooks,
this indicates that the line should be hidden, as though it never
happened.

Local output can be produced on any subw:
say(subw,"message");
A subw of 0 means "whichever is current" and is appropriate when no
subw reference is available. If additional arguments (after the message)
are present, the message will be passed through sprintf(). Multiple
lines of output can be produced; they will be processed separately.

There are other ways that a plugin can hook itself into the system, such as
OS-level signals (with the signal() command, and distinct from GTK signals),
but these are all unsupported. Not only are they potentially platform
specific (signals certainly are), but they will break the plugin unloading
system, which is admittedly fragile already. Use this sort of thing ONLY if
you are absolutely sure you know what you're doing.

ADVISORY: Commands can be synthesized directly to a subw or conn:
send(conn,line+"\r\n");
Note that a subwindow may not necessarily have a connection, though
a connection will always have a display. (If you know that it's a
subw, you can gain a little efficiency by explicitly sending to
subw->connection, but this is optional. Sending to subw works.)
This should be considered abnormal for an input hook, however, as
it bypasses other hooks - use nexthook() instead. Alternatively,
call G->G->window->execcommand() to send past all current hooks,
as though the user had just typed the command. None of this is
supported, however.

ADVISORY: Additional information may be stored in subw and/or conn.
This is not guaranteed, however, as there is no protection against
collisions; but if you make your key begin with "plugins/pluginname/"
(where pluginname is your plugin's name), this will most likely be
safe.

ADVISORY: The subw/conn mappings may be saved for use in callbacks.
However, if the subwindow or connection has been closed, their
mappings will no longer be valid.

BEST PRACTICE: If your plugin inherits only one mode (command, hook,
window), a create() function is optional, but for plugins using
multiple, it is necessary. Your create() function is called whenever
the plugin is initially loaded or updated; it must call ::create to
ensure that its parents are called. A minimal create function is:
void create(string name) {::create(name);}

If a plugin wants a configuration file (other than what can be done
with persist[]), it should have the same base name as the plugin,
the extension ".ini", and be placed in the main Gypsum directory.
No such file should exist in the repository (to avoid overwriting
a user's config), but a ".ini.example" file should be provided if
appropriate. BEST PRACTICE: Use a configdlg instead.

A plugin will be loaded by default if it has this declaration at top-level:
constant plugin_active_by_default = 1;
The plugin is probed for this by compiling it and examining its constants,
so it's possible for the value of the constant to be programmatically
chosen, eg based on the presence or absence of some lower-level module. If
the loading of the plugin could be problematic, guard the entire code thus:
#if !constant(COMPILE_ONLY)
... plugin code here ...
#endif
Anything inside this check will not be processed during the probe phase.
(The normal create() call also doesn't happen during probing, so most
plugins need not go to this level of hassle.)

ADVISORY: Everything in globals.pike can be used simply by referencing
its name. Explore the file for what can be used; most of it is stable,
even if not explicitly part of this file's pledge. They're omitted for
brevity and to avoid duplicating documentation more than necessary. Other
files are similarly available, and are similarly stable, though less likely
to be of use to plugins.

BEST PRACTICE: If call_out is used to delay or repeat a function call (eg to
periodically update status text or other display), ensure that it will be
safe against updates and unloads by checking that the module is still loaded.

Certain elements in subw and conn are guaranteed, and designed to be read by
plugins. Nothing is guaranteed for writing; however, poking around in the
source code will show a number of interesting possibilities. Have fun. :)
But you can safely _read_ the following:

subw->connection - identical to conn, if there is one (there might not be).

conn->display - identical to subw (there will always be this).

subw->world - (usually) short identifier for the current or most-recent
world. This may be numeric and may even have spaces in it, but it should be
string-for-string identical every time the same world is connected to.

conn->worldname - descriptive name for the current world (used as tab text,
for instance). Should be used as a human-readable world description.

conn->sock - socket object, if connected. It's possible for there to be a
subw->connection but for its sock to be 0/absent.
