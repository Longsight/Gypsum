Gypsum Plugins
==============

Scripts in this directory are automatically loaded on Gypsum startup.

As Gypsum is a free and open system, anything described in this document
can be overridden or augmented, so I'll just describe the defaults and
leave the rest to your imagination. Anything's possible.

Functionality stated here is a Gypsum promise, unless marked "advisory".
Upgrading Gypsum within the same major version should not violate any
promised behaviour, and any departure from these promises is a bug.

Every plugin has a name, which is the file name without any path or the
".pike" extension. Plugins are loaded in directory-walk order, but once
bootstrapping is complete, only the file name matters. Initialization
order can thus be modified by moving scripts into subdirectories.

A plugin may be a command, a hook, a window, or any combination thereof.

Commands
--------

Commands are invoked explicitly by the user typing "/foo", where foo is
the plugin's name. The plugin should define a function thus:

int process(string param,mapping(string:mixed) subw)

The 'param' parameter is the parameters to the command. (Yo dawg?) It
may be "", but it will never be 0. The subw mapping identifies the
subwindow (aka tab) into which the command was typed; ideally (but not
mandatorially) this should be where messages are sent, etc.

If a command triggers some command being sent to the connection (except
with the nexthook() function, see below), it is courteous to clear the
prompt prior to returning:

subw->prompt=({([])});

This maintains the behaviour of normal command entry. Otherwise, the
prompt (if any) will be retained, which is normal behaviour for local
operations.

Hooks
-----

Hooks provide one or both of an input hook (monitors typed commands)
and an output hook (monitors text from the server). Their function
signatures are:

int inputhook(string line,mapping(string:mixed) subw)
int outputhook(string line,mapping(string:mixed) conn)

An input hook is very similar to a command processor, with the following
distinctions:

* Only one command processor is ever called for a given command - the
  one whose name matches the command entered. Every hook is called for
  every command.
* Command processors handle slash commands (eg "/alias"). Hooks handle
  what would otherwise go to the MUD (those without slashes).
* In "password mode" (where inputted text is hidden), hooks are not
  called. Commands still will be, though.
* A command's "param" is what comes after the command name. A hook's
  "line" is the entire line.

An input hook can feed a replacement command into the system with:
nexthook(line, subw);
This can be either before or after returning 1 from the hook function.
If nexthook is successful, it will return 1, so modifying the command
can be done by simply:
return nexthook(modified_line, subw);
Returning from the hook function and subsequently calling nexthook
will work so long as the subw still exists. (Note that nexthook will
not call the current hook function, and thus cannot create an infinite
loop.)
ADVISORY: If this is called and 0 is returned, both commands will be
executed, but this is not the normal form of processing and is not
formally supported.

An output hook is similar to an input hook, but works on a different
type of line: a line of text from the server. It therefore does not
receive a "subw", but instead a "conn" (connection info), which will
have a subwindow reference as conn->display - this can be used just
like subw.

Windows
-------

Rather than manually creating a window, inherit window to ensure that
your subwindow is well-behaved. Provide the following functions:

void makewindow()
Called when your plugin is first loaded, and not called when it is
reloaded. Should store all GTK object references etc inside win[].
The plugin's main window should be stored in win->mainwindow; set
(or consider setting) the following properties on it:
	"title":"some useful string, even if you suppress its display"
	"transient-for":G->G->window->mainwindow /* mandatory */
	"no-show-all":1 /* to hide the window initially */
	"modal":1 /* may be useful for config dialogs */
After creating the window, call ::makewindow() in case further setup
needs to be done.

void dosignals()
Connect signals to callback functions. Will be called on reload.
Should look up GTK objects from win[] and use gtksignal() thus:
	::dosignals();
	win->signals+=({
		gtksignal(win->someobj,"some_event",callback),
		//... as many as needed
	});

Generic storage space is in mapping(string:mixed) win, which is
retained across reloads.

Status text
-----------

Similar to the window, this allows precisely one label to be displayed
as part of the main window's status text. May be combined with window,
or any of the other modes. No functions need be provided; simply call
setstatus(sbtext) any time you wish to change the currently-displayed
text. Order of elements on the status bar is by order loaded.

General notes
-------------

All handlers should return 1 if processing is "complete" - if the
command or line has been consumed. For commands, this should be the
normal case, and suppresses the "Unknown command" message; for hooks,
this indicates that the line should be hidden, as though it never
happened.

Local output can be produced on any subw:
say(subw,"message");
A subw of 0 means "whichever is current" and is appropriate when no
subw reference is available.

ADVISORY: Commands can be synthesized directly to a subw or conn:
send(conn,line+"\r\n");
Note that a subwindow may not necessarily have a connection, though
a connection will always have a display. (If you know that it's a
subw, you can gain a little efficiency by explicitly sending to
subw->connection, but this is optional. Sending to subw works.)
This should be considered abnormal for an input hook, however, as
it bypasses other hooks - use nexthook() instead. Alternatively,
call G->G->window->execcommand() to send past all current hooks,
as though the user had just typed the command. None of this is
supported, however.

ADVISORY: Additional information may be stored in subw and/or conn.
This is not guaranteed, however, as there is no protection against
collisions; but if you make your key begin with "plugins/pluginname/"
(where pluginname is your plugin's name), this will most likely be
safe.

ADVISORY: The subw/conn mappings may be saved for use in callbacks.
However, if the subwindow or connection has been closed, their
mappings will no longer be valid.

BEST PRACTICE: If your plugin inherits only one mode (command, hook,
window), a create() function is optional, but for plugins using
multiple, it is necessary. Your create() function is called whenever
the plugin is initially loaded or updated; it must call ::create to
ensure that its parents are called. A minimal create function is:
void create(string name) {::create(name);}
Note however that this must NOT be done if you have no inherits.
However this is very unusual.

If a plugin wants a configuration file (other than what can be done
with persist[]), it should have the same base name as the plugin,
the extension ".ini", and be placed in the main Gypsum directory.
No such file should exist in the repository (to avoid overwriting
a user's config), but a ".ini.example" file should be provided if
appropriate. BEST PRACTICE: Use a configdlg instead.
